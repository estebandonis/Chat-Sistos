// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_chat_2eproto;
namespace chat {
class IncomingMessageResponse;
struct IncomingMessageResponseDefaultTypeInternal;
extern IncomingMessageResponseDefaultTypeInternal _IncomingMessageResponse_default_instance_;
class NewUserRequest;
struct NewUserRequestDefaultTypeInternal;
extern NewUserRequestDefaultTypeInternal _NewUserRequest_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SendMessageRequest;
struct SendMessageRequestDefaultTypeInternal;
extern SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
class UpdateStatusRequest;
struct UpdateStatusRequestDefaultTypeInternal;
extern UpdateStatusRequestDefaultTypeInternal _UpdateStatusRequest_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserListRequest;
struct UserListRequestDefaultTypeInternal;
extern UserListRequestDefaultTypeInternal _UserListRequest_default_instance_;
class UserListResponse;
struct UserListResponseDefaultTypeInternal;
extern UserListResponseDefaultTypeInternal _UserListResponse_default_instance_;
}  // namespace chat
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace chat {
enum UserStatus : int {
  ONLINE = 0,
  BUSY = 1,
  OFFLINE = 2,
  UserStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UserStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UserStatus_IsValid(int value);
extern const uint32_t UserStatus_internal_data_[];
constexpr UserStatus UserStatus_MIN = static_cast<UserStatus>(0);
constexpr UserStatus UserStatus_MAX = static_cast<UserStatus>(2);
constexpr int UserStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
UserStatus_descriptor();
template <typename T>
const std::string& UserStatus_Name(T value) {
  static_assert(std::is_same<T, UserStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UserStatus_Name().");
  return UserStatus_Name(static_cast<UserStatus>(value));
}
template <>
inline const std::string& UserStatus_Name(UserStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UserStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool UserStatus_Parse(absl::string_view name, UserStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserStatus>(
      UserStatus_descriptor(), name, value);
}
enum MessageType : int {
  BROADCAST = 0,
  DIRECT = 1,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageType_IsValid(int value);
extern const uint32_t MessageType_internal_data_[];
constexpr MessageType MessageType_MIN = static_cast<MessageType>(0);
constexpr MessageType MessageType_MAX = static_cast<MessageType>(1);
constexpr int MessageType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
MessageType_descriptor();
template <typename T>
const std::string& MessageType_Name(T value) {
  static_assert(std::is_same<T, MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return MessageType_Name(static_cast<MessageType>(value));
}
template <>
inline const std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
      MessageType_descriptor(), name, value);
}
enum UserListType : int {
  ALL = 0,
  SINGLE = 1,
  UserListType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UserListType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UserListType_IsValid(int value);
extern const uint32_t UserListType_internal_data_[];
constexpr UserListType UserListType_MIN = static_cast<UserListType>(0);
constexpr UserListType UserListType_MAX = static_cast<UserListType>(1);
constexpr int UserListType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
UserListType_descriptor();
template <typename T>
const std::string& UserListType_Name(T value) {
  static_assert(std::is_same<T, UserListType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UserListType_Name().");
  return UserListType_Name(static_cast<UserListType>(value));
}
template <>
inline const std::string& UserListType_Name(UserListType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UserListType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool UserListType_Parse(absl::string_view name, UserListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserListType>(
      UserListType_descriptor(), name, value);
}
enum Operation : int {
  REGISTER_USER = 0,
  SEND_MESSAGE = 1,
  UPDATE_STATUS = 2,
  GET_USERS = 3,
  UNREGISTER_USER = 4,
  INCOMING_MESSAGE = 5,
  Operation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Operation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Operation_IsValid(int value);
extern const uint32_t Operation_internal_data_[];
constexpr Operation Operation_MIN = static_cast<Operation>(0);
constexpr Operation Operation_MAX = static_cast<Operation>(5);
constexpr int Operation_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Operation_descriptor();
template <typename T>
const std::string& Operation_Name(T value) {
  static_assert(std::is_same<T, Operation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Operation_Name().");
  return Operation_Name(static_cast<Operation>(value));
}
template <>
inline const std::string& Operation_Name(Operation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Operation_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Operation_Parse(absl::string_view name, Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation>(
      Operation_descriptor(), name, value);
}
enum StatusCode : int {
  UNKNOWN_STATUS = 0,
  OK = 200,
  BAD_REQUEST = 400,
  INTERNAL_SERVER_ERROR = 500,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StatusCode_IsValid(int value);
extern const uint32_t StatusCode_internal_data_[];
constexpr StatusCode StatusCode_MIN = static_cast<StatusCode>(0);
constexpr StatusCode StatusCode_MAX = static_cast<StatusCode>(500);
constexpr int StatusCode_ARRAYSIZE = 500 + 1;
const ::google::protobuf::EnumDescriptor*
StatusCode_descriptor();
template <typename T>
const std::string& StatusCode_Name(T value) {
  static_assert(std::is_same<T, StatusCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatusCode_Name().");
  return ::google::protobuf::internal::NameOfEnum(StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(absl::string_view name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
      StatusCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserListRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.UserListRequest) */ {
 public:
  inline UserListRequest() : UserListRequest(nullptr) {}
  ~UserListRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserListRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserListRequest(const UserListRequest& from) : UserListRequest(nullptr, from) {}
  inline UserListRequest(UserListRequest&& from) noexcept
      : UserListRequest(nullptr, std::move(from)) {}
  inline UserListRequest& operator=(const UserListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserListRequest& operator=(UserListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserListRequest* internal_default_instance() {
    return reinterpret_cast<const UserListRequest*>(
        &_UserListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(UserListRequest& a, UserListRequest& b) { a.Swap(&b); }
  inline void Swap(UserListRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserListRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UserListRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserListRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserListRequest& from) { UserListRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserListRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.UserListRequest"; }

 protected:
  explicit UserListRequest(::google::protobuf::Arena* arena);
  UserListRequest(::google::protobuf::Arena* arena, const UserListRequest& from);
  UserListRequest(::google::protobuf::Arena* arena, UserListRequest&& from) noexcept
      : UserListRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // @@protoc_insertion_point(class_scope:chat.UserListRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class User final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR User(
      ::google::protobuf::internal::ConstantInitialized);

  inline User(const User& from) : User(nullptr, from) {}
  inline User(User&& from) noexcept
      : User(nullptr, std::move(from)) {}
  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
        &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(User& a, User& b) { a.Swap(&b); }
  inline void Swap(User* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<User>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const User& from) { User::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(User* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.User"; }

 protected:
  explicit User(::google::protobuf::Arena* arena);
  User(::google::protobuf::Arena* arena, const User& from);
  User(::google::protobuf::Arena* arena, User&& from) noexcept
      : User(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // .chat.UserStatus status = 2;
  void clear_status() ;
  ::chat::UserStatus status() const;
  void set_status(::chat::UserStatus value);

  private:
  ::chat::UserStatus _internal_status() const;
  void _internal_set_status(::chat::UserStatus value);

  public:
  // @@protoc_insertion_point(class_scope:chat.User)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      26, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class UpdateStatusRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.UpdateStatusRequest) */ {
 public:
  inline UpdateStatusRequest() : UpdateStatusRequest(nullptr) {}
  ~UpdateStatusRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateStatusRequest(const UpdateStatusRequest& from) : UpdateStatusRequest(nullptr, from) {}
  inline UpdateStatusRequest(UpdateStatusRequest&& from) noexcept
      : UpdateStatusRequest(nullptr, std::move(from)) {}
  inline UpdateStatusRequest& operator=(const UpdateStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStatusRequest& operator=(UpdateStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateStatusRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStatusRequest*>(
        &_UpdateStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(UpdateStatusRequest& a, UpdateStatusRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateStatusRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateStatusRequest& from) { UpdateStatusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateStatusRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.UpdateStatusRequest"; }

 protected:
  explicit UpdateStatusRequest(::google::protobuf::Arena* arena);
  UpdateStatusRequest(::google::protobuf::Arena* arena, const UpdateStatusRequest& from);
  UpdateStatusRequest(::google::protobuf::Arena* arena, UpdateStatusRequest&& from) noexcept
      : UpdateStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kNewStatusFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // .chat.UserStatus new_status = 2;
  void clear_new_status() ;
  ::chat::UserStatus new_status() const;
  void set_new_status(::chat::UserStatus value);

  private:
  ::chat::UserStatus _internal_new_status() const;
  void _internal_set_new_status(::chat::UserStatus value);

  public:
  // @@protoc_insertion_point(class_scope:chat.UpdateStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    int new_status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class SendMessageRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.SendMessageRequest) */ {
 public:
  inline SendMessageRequest() : SendMessageRequest(nullptr) {}
  ~SendMessageRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendMessageRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendMessageRequest(const SendMessageRequest& from) : SendMessageRequest(nullptr, from) {}
  inline SendMessageRequest(SendMessageRequest&& from) noexcept
      : SendMessageRequest(nullptr, std::move(from)) {}
  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageRequest& operator=(SendMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendMessageRequest*>(
        &_SendMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SendMessageRequest& a, SendMessageRequest& b) { a.Swap(&b); }
  inline void Swap(SendMessageRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SendMessageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendMessageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendMessageRequest& from) { SendMessageRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SendMessageRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.SendMessageRequest"; }

 protected:
  explicit SendMessageRequest(::google::protobuf::Arena* arena);
  SendMessageRequest(::google::protobuf::Arena* arena, const SendMessageRequest& from);
  SendMessageRequest(::google::protobuf::Arena* arena, SendMessageRequest&& from) noexcept
      : SendMessageRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRecipientFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string recipient = 1;
  void clear_recipient() ;
  const std::string& recipient() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient(Arg_&& arg, Args_... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* value);

  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(
      const std::string& value);
  std::string* _internal_mutable_recipient();

  public:
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:chat.SendMessageRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr recipient_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class NewUserRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.NewUserRequest) */ {
 public:
  inline NewUserRequest() : NewUserRequest(nullptr) {}
  ~NewUserRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewUserRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewUserRequest(const NewUserRequest& from) : NewUserRequest(nullptr, from) {}
  inline NewUserRequest(NewUserRequest&& from) noexcept
      : NewUserRequest(nullptr, std::move(from)) {}
  inline NewUserRequest& operator=(const NewUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewUserRequest& operator=(NewUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewUserRequest* internal_default_instance() {
    return reinterpret_cast<const NewUserRequest*>(
        &_NewUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NewUserRequest& a, NewUserRequest& b) { a.Swap(&b); }
  inline void Swap(NewUserRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewUserRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewUserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewUserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewUserRequest& from) { NewUserRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewUserRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.NewUserRequest"; }

 protected:
  explicit NewUserRequest(::google::protobuf::Arena* arena);
  NewUserRequest(::google::protobuf::Arena* arena, const NewUserRequest& from);
  NewUserRequest(::google::protobuf::Arena* arena, NewUserRequest&& from) noexcept
      : NewUserRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // @@protoc_insertion_point(class_scope:chat.NewUserRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class IncomingMessageResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.IncomingMessageResponse) */ {
 public:
  inline IncomingMessageResponse() : IncomingMessageResponse(nullptr) {}
  ~IncomingMessageResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IncomingMessageResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline IncomingMessageResponse(const IncomingMessageResponse& from) : IncomingMessageResponse(nullptr, from) {}
  inline IncomingMessageResponse(IncomingMessageResponse&& from) noexcept
      : IncomingMessageResponse(nullptr, std::move(from)) {}
  inline IncomingMessageResponse& operator=(const IncomingMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncomingMessageResponse& operator=(IncomingMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncomingMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncomingMessageResponse* internal_default_instance() {
    return reinterpret_cast<const IncomingMessageResponse*>(
        &_IncomingMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(IncomingMessageResponse& a, IncomingMessageResponse& b) { a.Swap(&b); }
  inline void Swap(IncomingMessageResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncomingMessageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncomingMessageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<IncomingMessageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IncomingMessageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IncomingMessageResponse& from) { IncomingMessageResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IncomingMessageResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.IncomingMessageResponse"; }

 protected:
  explicit IncomingMessageResponse(::google::protobuf::Arena* arena);
  IncomingMessageResponse(::google::protobuf::Arena* arena, const IncomingMessageResponse& from);
  IncomingMessageResponse(::google::protobuf::Arena* arena, IncomingMessageResponse&& from) noexcept
      : IncomingMessageResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSenderFieldNumber = 1,
    kContentFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string sender = 1;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // .chat.MessageType type = 3;
  void clear_type() ;
  ::chat::MessageType type() const;
  void set_type(::chat::MessageType value);

  private:
  ::chat::MessageType _internal_type() const;
  void _internal_set_type(::chat::MessageType value);

  public:
  // @@protoc_insertion_point(class_scope:chat.IncomingMessageResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class UserListResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.UserListResponse) */ {
 public:
  inline UserListResponse() : UserListResponse(nullptr) {}
  ~UserListResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserListResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserListResponse(const UserListResponse& from) : UserListResponse(nullptr, from) {}
  inline UserListResponse(UserListResponse&& from) noexcept
      : UserListResponse(nullptr, std::move(from)) {}
  inline UserListResponse& operator=(const UserListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserListResponse& operator=(UserListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserListResponse* internal_default_instance() {
    return reinterpret_cast<const UserListResponse*>(
        &_UserListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(UserListResponse& a, UserListResponse& b) { a.Swap(&b); }
  inline void Swap(UserListResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UserListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserListResponse& from) { UserListResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserListResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.UserListResponse"; }

 protected:
  explicit UserListResponse(::google::protobuf::Arena* arena);
  UserListResponse(::google::protobuf::Arena* arena, const UserListResponse& from);
  UserListResponse(::google::protobuf::Arena* arena, UserListResponse&& from) noexcept
      : UserListResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsersFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .chat.User users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;

  public:
  void clear_users() ;
  ::chat::User* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField<::chat::User>* mutable_users();

  private:
  const ::google::protobuf::RepeatedPtrField<::chat::User>& _internal_users() const;
  ::google::protobuf::RepeatedPtrField<::chat::User>* _internal_mutable_users();
  public:
  const ::chat::User& users(int index) const;
  ::chat::User* add_users();
  const ::google::protobuf::RepeatedPtrField<::chat::User>& users() const;
  // .chat.UserListType type = 2;
  void clear_type() ;
  ::chat::UserListType type() const;
  void set_type(::chat::UserListType value);

  private:
  ::chat::UserListType _internal_type() const;
  void _internal_set_type(::chat::UserListType value);

  public:
  // @@protoc_insertion_point(class_scope:chat.UserListResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::chat::User > users_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline Request(const Request& from) : Request(nullptr, from) {}
  inline Request(Request&& from) noexcept
      : Request(nullptr, std::move(from)) {}
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kRegisterUser = 2,
    kSendMessage = 3,
    kUpdateStatus = 4,
    kGetUsers = 5,
    kUnregisterUser = 6,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
        &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Request& a, Request& b) { a.Swap(&b); }
  inline void Swap(Request* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Request& from) { Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Request* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.Request"; }

 protected:
  explicit Request(::google::protobuf::Arena* arena);
  Request(::google::protobuf::Arena* arena, const Request& from);
  Request(::google::protobuf::Arena* arena, Request&& from) noexcept
      : Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOperationFieldNumber = 1,
    kRegisterUserFieldNumber = 2,
    kSendMessageFieldNumber = 3,
    kUpdateStatusFieldNumber = 4,
    kGetUsersFieldNumber = 5,
    kUnregisterUserFieldNumber = 6,
  };
  // .chat.Operation operation = 1;
  void clear_operation() ;
  ::chat::Operation operation() const;
  void set_operation(::chat::Operation value);

  private:
  ::chat::Operation _internal_operation() const;
  void _internal_set_operation(::chat::Operation value);

  public:
  // .chat.NewUserRequest register_user = 2;
  bool has_register_user() const;
  private:
  bool _internal_has_register_user() const;

  public:
  void clear_register_user() ;
  const ::chat::NewUserRequest& register_user() const;
  PROTOBUF_NODISCARD ::chat::NewUserRequest* release_register_user();
  ::chat::NewUserRequest* mutable_register_user();
  void set_allocated_register_user(::chat::NewUserRequest* value);
  void unsafe_arena_set_allocated_register_user(::chat::NewUserRequest* value);
  ::chat::NewUserRequest* unsafe_arena_release_register_user();

  private:
  const ::chat::NewUserRequest& _internal_register_user() const;
  ::chat::NewUserRequest* _internal_mutable_register_user();

  public:
  // .chat.SendMessageRequest send_message = 3;
  bool has_send_message() const;
  private:
  bool _internal_has_send_message() const;

  public:
  void clear_send_message() ;
  const ::chat::SendMessageRequest& send_message() const;
  PROTOBUF_NODISCARD ::chat::SendMessageRequest* release_send_message();
  ::chat::SendMessageRequest* mutable_send_message();
  void set_allocated_send_message(::chat::SendMessageRequest* value);
  void unsafe_arena_set_allocated_send_message(::chat::SendMessageRequest* value);
  ::chat::SendMessageRequest* unsafe_arena_release_send_message();

  private:
  const ::chat::SendMessageRequest& _internal_send_message() const;
  ::chat::SendMessageRequest* _internal_mutable_send_message();

  public:
  // .chat.UpdateStatusRequest update_status = 4;
  bool has_update_status() const;
  private:
  bool _internal_has_update_status() const;

  public:
  void clear_update_status() ;
  const ::chat::UpdateStatusRequest& update_status() const;
  PROTOBUF_NODISCARD ::chat::UpdateStatusRequest* release_update_status();
  ::chat::UpdateStatusRequest* mutable_update_status();
  void set_allocated_update_status(::chat::UpdateStatusRequest* value);
  void unsafe_arena_set_allocated_update_status(::chat::UpdateStatusRequest* value);
  ::chat::UpdateStatusRequest* unsafe_arena_release_update_status();

  private:
  const ::chat::UpdateStatusRequest& _internal_update_status() const;
  ::chat::UpdateStatusRequest* _internal_mutable_update_status();

  public:
  // .chat.UserListRequest get_users = 5;
  bool has_get_users() const;
  private:
  bool _internal_has_get_users() const;

  public:
  void clear_get_users() ;
  const ::chat::UserListRequest& get_users() const;
  PROTOBUF_NODISCARD ::chat::UserListRequest* release_get_users();
  ::chat::UserListRequest* mutable_get_users();
  void set_allocated_get_users(::chat::UserListRequest* value);
  void unsafe_arena_set_allocated_get_users(::chat::UserListRequest* value);
  ::chat::UserListRequest* unsafe_arena_release_get_users();

  private:
  const ::chat::UserListRequest& _internal_get_users() const;
  ::chat::UserListRequest* _internal_mutable_get_users();

  public:
  // .chat.User unregister_user = 6;
  bool has_unregister_user() const;
  private:
  bool _internal_has_unregister_user() const;

  public:
  void clear_unregister_user() ;
  const ::chat::User& unregister_user() const;
  PROTOBUF_NODISCARD ::chat::User* release_unregister_user();
  ::chat::User* mutable_unregister_user();
  void set_allocated_unregister_user(::chat::User* value);
  void unsafe_arena_set_allocated_unregister_user(::chat::User* value);
  ::chat::User* unsafe_arena_release_unregister_user();

  private:
  const ::chat::User& _internal_unregister_user() const;
  ::chat::User* _internal_mutable_unregister_user();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:chat.Request)
 private:
  class _Internal;
  void set_has_register_user();
  void set_has_send_message();
  void set_has_update_status();
  void set_has_get_users();
  void set_has_unregister_user();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 6, 5,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    int operation_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::chat::NewUserRequest* register_user_;
      ::chat::SendMessageRequest* send_message_;
      ::chat::UpdateStatusRequest* update_status_;
      ::chat::UserListRequest* get_users_;
      ::chat::User* unregister_user_;
    } payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chat.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Response(
      ::google::protobuf::internal::ConstantInitialized);

  inline Response(const Response& from) : Response(nullptr, from) {}
  inline Response(Response&& from) noexcept
      : Response(nullptr, std::move(from)) {}
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kUserList = 4,
    kIncomingMessage = 5,
    RESULT_NOT_SET = 0,
  };
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
        &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Response& a, Response& b) { a.Swap(&b); }
  inline void Swap(Response* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Response& from) { Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Response* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "chat.Response"; }

 protected:
  explicit Response(::google::protobuf::Arena* arena);
  Response(::google::protobuf::Arena* arena, const Response& from);
  Response(::google::protobuf::Arena* arena, Response&& from) noexcept
      : Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 3,
    kOperationFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kUserListFieldNumber = 4,
    kIncomingMessageFieldNumber = 5,
  };
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .chat.Operation operation = 1;
  void clear_operation() ;
  ::chat::Operation operation() const;
  void set_operation(::chat::Operation value);

  private:
  ::chat::Operation _internal_operation() const;
  void _internal_set_operation(::chat::Operation value);

  public:
  // .chat.StatusCode status_code = 2;
  void clear_status_code() ;
  ::chat::StatusCode status_code() const;
  void set_status_code(::chat::StatusCode value);

  private:
  ::chat::StatusCode _internal_status_code() const;
  void _internal_set_status_code(::chat::StatusCode value);

  public:
  // .chat.UserListResponse user_list = 4;
  bool has_user_list() const;
  private:
  bool _internal_has_user_list() const;

  public:
  void clear_user_list() ;
  const ::chat::UserListResponse& user_list() const;
  PROTOBUF_NODISCARD ::chat::UserListResponse* release_user_list();
  ::chat::UserListResponse* mutable_user_list();
  void set_allocated_user_list(::chat::UserListResponse* value);
  void unsafe_arena_set_allocated_user_list(::chat::UserListResponse* value);
  ::chat::UserListResponse* unsafe_arena_release_user_list();

  private:
  const ::chat::UserListResponse& _internal_user_list() const;
  ::chat::UserListResponse* _internal_mutable_user_list();

  public:
  // .chat.IncomingMessageResponse incoming_message = 5;
  bool has_incoming_message() const;
  private:
  bool _internal_has_incoming_message() const;

  public:
  void clear_incoming_message() ;
  const ::chat::IncomingMessageResponse& incoming_message() const;
  PROTOBUF_NODISCARD ::chat::IncomingMessageResponse* release_incoming_message();
  ::chat::IncomingMessageResponse* mutable_incoming_message();
  void set_allocated_incoming_message(::chat::IncomingMessageResponse* value);
  void unsafe_arena_set_allocated_incoming_message(::chat::IncomingMessageResponse* value);
  ::chat::IncomingMessageResponse* unsafe_arena_release_incoming_message();

  private:
  const ::chat::IncomingMessageResponse& _internal_incoming_message() const;
  ::chat::IncomingMessageResponse* _internal_mutable_incoming_message();

  public:
  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:chat.Response)
 private:
  class _Internal;
  void set_has_user_list();
  void set_has_incoming_message();
  inline bool has_result() const;
  inline void clear_has_result();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 2,
      29, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    int operation_;
    int status_code_;
    union ResultUnion {
      constexpr ResultUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::chat::UserListResponse* user_list_;
      ::chat::IncomingMessageResponse* incoming_message_;
    } result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// User

// string username = 1;
inline void User::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& User::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.User.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.User.username)
}
inline std::string* User::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.User.username)
  return _s;
}
inline const std::string& User::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void User::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* User::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.User.username)
  return _impl_.username_.Release();
}
inline void User::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.User.username)
}

// .chat.UserStatus status = 2;
inline void User::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::chat::UserStatus User::status() const {
  // @@protoc_insertion_point(field_get:chat.User.status)
  return _internal_status();
}
inline void User::set_status(::chat::UserStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chat.User.status)
}
inline ::chat::UserStatus User::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::chat::UserStatus>(_impl_.status_);
}
inline void User::_internal_set_status(::chat::UserStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// NewUserRequest

// string username = 1;
inline void NewUserRequest::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& NewUserRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.NewUserRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewUserRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.NewUserRequest.username)
}
inline std::string* NewUserRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.NewUserRequest.username)
  return _s;
}
inline const std::string& NewUserRequest::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void NewUserRequest::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* NewUserRequest::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* NewUserRequest::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.NewUserRequest.username)
  return _impl_.username_.Release();
}
inline void NewUserRequest::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.NewUserRequest.username)
}

// -------------------------------------------------------------------

// SendMessageRequest

// string recipient = 1;
inline void SendMessageRequest::clear_recipient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recipient_.ClearToEmpty();
}
inline const std::string& SendMessageRequest::recipient() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.SendMessageRequest.recipient)
  return _internal_recipient();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendMessageRequest::set_recipient(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recipient_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.SendMessageRequest.recipient)
}
inline std::string* SendMessageRequest::mutable_recipient() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:chat.SendMessageRequest.recipient)
  return _s;
}
inline const std::string& SendMessageRequest::_internal_recipient() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.recipient_.Get();
}
inline void SendMessageRequest::_internal_set_recipient(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recipient_.Set(value, GetArena());
}
inline std::string* SendMessageRequest::_internal_mutable_recipient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.recipient_.Mutable( GetArena());
}
inline std::string* SendMessageRequest::release_recipient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.SendMessageRequest.recipient)
  return _impl_.recipient_.Release();
}
inline void SendMessageRequest::set_allocated_recipient(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recipient_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.recipient_.IsDefault()) {
          _impl_.recipient_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.SendMessageRequest.recipient)
}

// string content = 2;
inline void SendMessageRequest::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& SendMessageRequest::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.SendMessageRequest.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendMessageRequest::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.SendMessageRequest.content)
}
inline std::string* SendMessageRequest::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:chat.SendMessageRequest.content)
  return _s;
}
inline const std::string& SendMessageRequest::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void SendMessageRequest::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* SendMessageRequest::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* SendMessageRequest::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.SendMessageRequest.content)
  return _impl_.content_.Release();
}
inline void SendMessageRequest::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.SendMessageRequest.content)
}

// -------------------------------------------------------------------

// IncomingMessageResponse

// string sender = 1;
inline void IncomingMessageResponse::clear_sender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& IncomingMessageResponse::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.IncomingMessageResponse.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncomingMessageResponse::set_sender(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.IncomingMessageResponse.sender)
}
inline std::string* IncomingMessageResponse::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:chat.IncomingMessageResponse.sender)
  return _s;
}
inline const std::string& IncomingMessageResponse::_internal_sender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sender_.Get();
}
inline void IncomingMessageResponse::_internal_set_sender(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* IncomingMessageResponse::_internal_mutable_sender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* IncomingMessageResponse::release_sender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.IncomingMessageResponse.sender)
  return _impl_.sender_.Release();
}
inline void IncomingMessageResponse::set_allocated_sender(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sender_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.IncomingMessageResponse.sender)
}

// string content = 2;
inline void IncomingMessageResponse::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& IncomingMessageResponse::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.IncomingMessageResponse.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncomingMessageResponse::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.IncomingMessageResponse.content)
}
inline std::string* IncomingMessageResponse::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:chat.IncomingMessageResponse.content)
  return _s;
}
inline const std::string& IncomingMessageResponse::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void IncomingMessageResponse::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* IncomingMessageResponse::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* IncomingMessageResponse::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.IncomingMessageResponse.content)
  return _impl_.content_.Release();
}
inline void IncomingMessageResponse::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.IncomingMessageResponse.content)
}

// .chat.MessageType type = 3;
inline void IncomingMessageResponse::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::chat::MessageType IncomingMessageResponse::type() const {
  // @@protoc_insertion_point(field_get:chat.IncomingMessageResponse.type)
  return _internal_type();
}
inline void IncomingMessageResponse::set_type(::chat::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chat.IncomingMessageResponse.type)
}
inline ::chat::MessageType IncomingMessageResponse::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::chat::MessageType>(_impl_.type_);
}
inline void IncomingMessageResponse::_internal_set_type(::chat::MessageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// UserListRequest

// string username = 1;
inline void UserListRequest::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserListRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.UserListRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserListRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.UserListRequest.username)
}
inline std::string* UserListRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.UserListRequest.username)
  return _s;
}
inline const std::string& UserListRequest::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void UserListRequest::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* UserListRequest::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* UserListRequest::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.UserListRequest.username)
  return _impl_.username_.Release();
}
inline void UserListRequest::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserListRequest.username)
}

// -------------------------------------------------------------------

// UserListResponse

// repeated .chat.User users = 1;
inline int UserListResponse::_internal_users_size() const {
  return _internal_users().size();
}
inline int UserListResponse::users_size() const {
  return _internal_users_size();
}
inline void UserListResponse::clear_users() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.users_.Clear();
}
inline ::chat::User* UserListResponse::mutable_users(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chat.UserListResponse.users)
  return _internal_mutable_users()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::chat::User>* UserListResponse::mutable_users()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chat.UserListResponse.users)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_users();
}
inline const ::chat::User& UserListResponse::users(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.UserListResponse.users)
  return _internal_users().Get(index);
}
inline ::chat::User* UserListResponse::add_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::chat::User* _add = _internal_mutable_users()->Add();
  // @@protoc_insertion_point(field_add:chat.UserListResponse.users)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::chat::User>& UserListResponse::users() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chat.UserListResponse.users)
  return _internal_users();
}
inline const ::google::protobuf::RepeatedPtrField<::chat::User>&
UserListResponse::_internal_users() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.users_;
}
inline ::google::protobuf::RepeatedPtrField<::chat::User>*
UserListResponse::_internal_mutable_users() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.users_;
}

// .chat.UserListType type = 2;
inline void UserListResponse::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::chat::UserListType UserListResponse::type() const {
  // @@protoc_insertion_point(field_get:chat.UserListResponse.type)
  return _internal_type();
}
inline void UserListResponse::set_type(::chat::UserListType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chat.UserListResponse.type)
}
inline ::chat::UserListType UserListResponse::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::chat::UserListType>(_impl_.type_);
}
inline void UserListResponse::_internal_set_type(::chat::UserListType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// UpdateStatusRequest

// string username = 1;
inline void UpdateStatusRequest::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UpdateStatusRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.UpdateStatusRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateStatusRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.UpdateStatusRequest.username)
}
inline std::string* UpdateStatusRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.UpdateStatusRequest.username)
  return _s;
}
inline const std::string& UpdateStatusRequest::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void UpdateStatusRequest::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* UpdateStatusRequest::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* UpdateStatusRequest::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.UpdateStatusRequest.username)
  return _impl_.username_.Release();
}
inline void UpdateStatusRequest::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UpdateStatusRequest.username)
}

// .chat.UserStatus new_status = 2;
inline void UpdateStatusRequest::clear_new_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_status_ = 0;
}
inline ::chat::UserStatus UpdateStatusRequest::new_status() const {
  // @@protoc_insertion_point(field_get:chat.UpdateStatusRequest.new_status)
  return _internal_new_status();
}
inline void UpdateStatusRequest::set_new_status(::chat::UserStatus value) {
  _internal_set_new_status(value);
  // @@protoc_insertion_point(field_set:chat.UpdateStatusRequest.new_status)
}
inline ::chat::UserStatus UpdateStatusRequest::_internal_new_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::chat::UserStatus>(_impl_.new_status_);
}
inline void UpdateStatusRequest::_internal_set_new_status(::chat::UserStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_status_ = value;
}

// -------------------------------------------------------------------

// Request

// .chat.Operation operation = 1;
inline void Request::clear_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operation_ = 0;
}
inline ::chat::Operation Request::operation() const {
  // @@protoc_insertion_point(field_get:chat.Request.operation)
  return _internal_operation();
}
inline void Request::set_operation(::chat::Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:chat.Request.operation)
}
inline ::chat::Operation Request::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::chat::Operation>(_impl_.operation_);
}
inline void Request::_internal_set_operation(::chat::Operation value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operation_ = value;
}

// .chat.NewUserRequest register_user = 2;
inline bool Request::has_register_user() const {
  return payload_case() == kRegisterUser;
}
inline bool Request::_internal_has_register_user() const {
  return payload_case() == kRegisterUser;
}
inline void Request::set_has_register_user() {
  _impl_._oneof_case_[0] = kRegisterUser;
}
inline void Request::clear_register_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kRegisterUser) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.register_user_;
    }
    clear_has_payload();
  }
}
inline ::chat::NewUserRequest* Request::release_register_user() {
  // @@protoc_insertion_point(field_release:chat.Request.register_user)
  if (payload_case() == kRegisterUser) {
    clear_has_payload();
    auto* temp = _impl_.payload_.register_user_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.register_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::NewUserRequest& Request::_internal_register_user() const {
  return payload_case() == kRegisterUser ? *_impl_.payload_.register_user_ : reinterpret_cast<::chat::NewUserRequest&>(::chat::_NewUserRequest_default_instance_);
}
inline const ::chat::NewUserRequest& Request::register_user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.Request.register_user)
  return _internal_register_user();
}
inline ::chat::NewUserRequest* Request::unsafe_arena_release_register_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Request.register_user)
  if (payload_case() == kRegisterUser) {
    clear_has_payload();
    auto* temp = _impl_.payload_.register_user_;
    _impl_.payload_.register_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_register_user(::chat::NewUserRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_register_user();
    _impl_.payload_.register_user_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Request.register_user)
}
inline ::chat::NewUserRequest* Request::_internal_mutable_register_user() {
  if (payload_case() != kRegisterUser) {
    clear_payload();
    set_has_register_user();
    _impl_.payload_.register_user_ =
        ::google::protobuf::Message::DefaultConstruct<::chat::NewUserRequest>(GetArena());
  }
  return _impl_.payload_.register_user_;
}
inline ::chat::NewUserRequest* Request::mutable_register_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::chat::NewUserRequest* _msg = _internal_mutable_register_user();
  // @@protoc_insertion_point(field_mutable:chat.Request.register_user)
  return _msg;
}

// .chat.SendMessageRequest send_message = 3;
inline bool Request::has_send_message() const {
  return payload_case() == kSendMessage;
}
inline bool Request::_internal_has_send_message() const {
  return payload_case() == kSendMessage;
}
inline void Request::set_has_send_message() {
  _impl_._oneof_case_[0] = kSendMessage;
}
inline void Request::clear_send_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kSendMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.send_message_;
    }
    clear_has_payload();
  }
}
inline ::chat::SendMessageRequest* Request::release_send_message() {
  // @@protoc_insertion_point(field_release:chat.Request.send_message)
  if (payload_case() == kSendMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.send_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::SendMessageRequest& Request::_internal_send_message() const {
  return payload_case() == kSendMessage ? *_impl_.payload_.send_message_ : reinterpret_cast<::chat::SendMessageRequest&>(::chat::_SendMessageRequest_default_instance_);
}
inline const ::chat::SendMessageRequest& Request::send_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.Request.send_message)
  return _internal_send_message();
}
inline ::chat::SendMessageRequest* Request::unsafe_arena_release_send_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Request.send_message)
  if (payload_case() == kSendMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.send_message_;
    _impl_.payload_.send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_send_message(::chat::SendMessageRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_send_message();
    _impl_.payload_.send_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Request.send_message)
}
inline ::chat::SendMessageRequest* Request::_internal_mutable_send_message() {
  if (payload_case() != kSendMessage) {
    clear_payload();
    set_has_send_message();
    _impl_.payload_.send_message_ =
        ::google::protobuf::Message::DefaultConstruct<::chat::SendMessageRequest>(GetArena());
  }
  return _impl_.payload_.send_message_;
}
inline ::chat::SendMessageRequest* Request::mutable_send_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::chat::SendMessageRequest* _msg = _internal_mutable_send_message();
  // @@protoc_insertion_point(field_mutable:chat.Request.send_message)
  return _msg;
}

// .chat.UpdateStatusRequest update_status = 4;
inline bool Request::has_update_status() const {
  return payload_case() == kUpdateStatus;
}
inline bool Request::_internal_has_update_status() const {
  return payload_case() == kUpdateStatus;
}
inline void Request::set_has_update_status() {
  _impl_._oneof_case_[0] = kUpdateStatus;
}
inline void Request::clear_update_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kUpdateStatus) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.update_status_;
    }
    clear_has_payload();
  }
}
inline ::chat::UpdateStatusRequest* Request::release_update_status() {
  // @@protoc_insertion_point(field_release:chat.Request.update_status)
  if (payload_case() == kUpdateStatus) {
    clear_has_payload();
    auto* temp = _impl_.payload_.update_status_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.update_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::UpdateStatusRequest& Request::_internal_update_status() const {
  return payload_case() == kUpdateStatus ? *_impl_.payload_.update_status_ : reinterpret_cast<::chat::UpdateStatusRequest&>(::chat::_UpdateStatusRequest_default_instance_);
}
inline const ::chat::UpdateStatusRequest& Request::update_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.Request.update_status)
  return _internal_update_status();
}
inline ::chat::UpdateStatusRequest* Request::unsafe_arena_release_update_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Request.update_status)
  if (payload_case() == kUpdateStatus) {
    clear_has_payload();
    auto* temp = _impl_.payload_.update_status_;
    _impl_.payload_.update_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_update_status(::chat::UpdateStatusRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_update_status();
    _impl_.payload_.update_status_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Request.update_status)
}
inline ::chat::UpdateStatusRequest* Request::_internal_mutable_update_status() {
  if (payload_case() != kUpdateStatus) {
    clear_payload();
    set_has_update_status();
    _impl_.payload_.update_status_ =
        ::google::protobuf::Message::DefaultConstruct<::chat::UpdateStatusRequest>(GetArena());
  }
  return _impl_.payload_.update_status_;
}
inline ::chat::UpdateStatusRequest* Request::mutable_update_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::chat::UpdateStatusRequest* _msg = _internal_mutable_update_status();
  // @@protoc_insertion_point(field_mutable:chat.Request.update_status)
  return _msg;
}

// .chat.UserListRequest get_users = 5;
inline bool Request::has_get_users() const {
  return payload_case() == kGetUsers;
}
inline bool Request::_internal_has_get_users() const {
  return payload_case() == kGetUsers;
}
inline void Request::set_has_get_users() {
  _impl_._oneof_case_[0] = kGetUsers;
}
inline void Request::clear_get_users() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kGetUsers) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.get_users_;
    }
    clear_has_payload();
  }
}
inline ::chat::UserListRequest* Request::release_get_users() {
  // @@protoc_insertion_point(field_release:chat.Request.get_users)
  if (payload_case() == kGetUsers) {
    clear_has_payload();
    auto* temp = _impl_.payload_.get_users_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.get_users_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::UserListRequest& Request::_internal_get_users() const {
  return payload_case() == kGetUsers ? *_impl_.payload_.get_users_ : reinterpret_cast<::chat::UserListRequest&>(::chat::_UserListRequest_default_instance_);
}
inline const ::chat::UserListRequest& Request::get_users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.Request.get_users)
  return _internal_get_users();
}
inline ::chat::UserListRequest* Request::unsafe_arena_release_get_users() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Request.get_users)
  if (payload_case() == kGetUsers) {
    clear_has_payload();
    auto* temp = _impl_.payload_.get_users_;
    _impl_.payload_.get_users_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_users(::chat::UserListRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_get_users();
    _impl_.payload_.get_users_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Request.get_users)
}
inline ::chat::UserListRequest* Request::_internal_mutable_get_users() {
  if (payload_case() != kGetUsers) {
    clear_payload();
    set_has_get_users();
    _impl_.payload_.get_users_ =
        ::google::protobuf::Message::DefaultConstruct<::chat::UserListRequest>(GetArena());
  }
  return _impl_.payload_.get_users_;
}
inline ::chat::UserListRequest* Request::mutable_get_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::chat::UserListRequest* _msg = _internal_mutable_get_users();
  // @@protoc_insertion_point(field_mutable:chat.Request.get_users)
  return _msg;
}

// .chat.User unregister_user = 6;
inline bool Request::has_unregister_user() const {
  return payload_case() == kUnregisterUser;
}
inline bool Request::_internal_has_unregister_user() const {
  return payload_case() == kUnregisterUser;
}
inline void Request::set_has_unregister_user() {
  _impl_._oneof_case_[0] = kUnregisterUser;
}
inline void Request::clear_unregister_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kUnregisterUser) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.unregister_user_;
    }
    clear_has_payload();
  }
}
inline ::chat::User* Request::release_unregister_user() {
  // @@protoc_insertion_point(field_release:chat.Request.unregister_user)
  if (payload_case() == kUnregisterUser) {
    clear_has_payload();
    auto* temp = _impl_.payload_.unregister_user_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.unregister_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::User& Request::_internal_unregister_user() const {
  return payload_case() == kUnregisterUser ? *_impl_.payload_.unregister_user_ : reinterpret_cast<::chat::User&>(::chat::_User_default_instance_);
}
inline const ::chat::User& Request::unregister_user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.Request.unregister_user)
  return _internal_unregister_user();
}
inline ::chat::User* Request::unsafe_arena_release_unregister_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Request.unregister_user)
  if (payload_case() == kUnregisterUser) {
    clear_has_payload();
    auto* temp = _impl_.payload_.unregister_user_;
    _impl_.payload_.unregister_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_unregister_user(::chat::User* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_unregister_user();
    _impl_.payload_.unregister_user_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Request.unregister_user)
}
inline ::chat::User* Request::_internal_mutable_unregister_user() {
  if (payload_case() != kUnregisterUser) {
    clear_payload();
    set_has_unregister_user();
    _impl_.payload_.unregister_user_ =
        ::google::protobuf::Message::DefaultConstruct<::chat::User>(GetArena());
  }
  return _impl_.payload_.unregister_user_;
}
inline ::chat::User* Request::mutable_unregister_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::chat::User* _msg = _internal_mutable_unregister_user();
  // @@protoc_insertion_point(field_mutable:chat.Request.unregister_user)
  return _msg;
}

inline bool Request::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Request::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Request::PayloadCase Request::payload_case() const {
  return Request::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .chat.Operation operation = 1;
inline void Response::clear_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operation_ = 0;
}
inline ::chat::Operation Response::operation() const {
  // @@protoc_insertion_point(field_get:chat.Response.operation)
  return _internal_operation();
}
inline void Response::set_operation(::chat::Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:chat.Response.operation)
}
inline ::chat::Operation Response::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::chat::Operation>(_impl_.operation_);
}
inline void Response::_internal_set_operation(::chat::Operation value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operation_ = value;
}

// .chat.StatusCode status_code = 2;
inline void Response::clear_status_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_code_ = 0;
}
inline ::chat::StatusCode Response::status_code() const {
  // @@protoc_insertion_point(field_get:chat.Response.status_code)
  return _internal_status_code();
}
inline void Response::set_status_code(::chat::StatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:chat.Response.status_code)
}
inline ::chat::StatusCode Response::_internal_status_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::chat::StatusCode>(_impl_.status_code_);
}
inline void Response::_internal_set_status_code(::chat::StatusCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_code_ = value;
}

// string message = 3;
inline void Response::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Response::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.Response.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Response::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chat.Response.message)
}
inline std::string* Response::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:chat.Response.message)
  return _s;
}
inline const std::string& Response::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Response::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Response::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:chat.Response.message)
  return _impl_.message_.Release();
}
inline void Response::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.Response.message)
}

// .chat.UserListResponse user_list = 4;
inline bool Response::has_user_list() const {
  return result_case() == kUserList;
}
inline bool Response::_internal_has_user_list() const {
  return result_case() == kUserList;
}
inline void Response::set_has_user_list() {
  _impl_._oneof_case_[0] = kUserList;
}
inline void Response::clear_user_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (result_case() == kUserList) {
    if (GetArena() == nullptr) {
      delete _impl_.result_.user_list_;
    }
    clear_has_result();
  }
}
inline ::chat::UserListResponse* Response::release_user_list() {
  // @@protoc_insertion_point(field_release:chat.Response.user_list)
  if (result_case() == kUserList) {
    clear_has_result();
    auto* temp = _impl_.result_.user_list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.user_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::UserListResponse& Response::_internal_user_list() const {
  return result_case() == kUserList ? *_impl_.result_.user_list_ : reinterpret_cast<::chat::UserListResponse&>(::chat::_UserListResponse_default_instance_);
}
inline const ::chat::UserListResponse& Response::user_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.Response.user_list)
  return _internal_user_list();
}
inline ::chat::UserListResponse* Response::unsafe_arena_release_user_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Response.user_list)
  if (result_case() == kUserList) {
    clear_has_result();
    auto* temp = _impl_.result_.user_list_;
    _impl_.result_.user_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_user_list(::chat::UserListResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_result();
  if (value) {
    set_has_user_list();
    _impl_.result_.user_list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Response.user_list)
}
inline ::chat::UserListResponse* Response::_internal_mutable_user_list() {
  if (result_case() != kUserList) {
    clear_result();
    set_has_user_list();
    _impl_.result_.user_list_ =
        ::google::protobuf::Message::DefaultConstruct<::chat::UserListResponse>(GetArena());
  }
  return _impl_.result_.user_list_;
}
inline ::chat::UserListResponse* Response::mutable_user_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::chat::UserListResponse* _msg = _internal_mutable_user_list();
  // @@protoc_insertion_point(field_mutable:chat.Response.user_list)
  return _msg;
}

// .chat.IncomingMessageResponse incoming_message = 5;
inline bool Response::has_incoming_message() const {
  return result_case() == kIncomingMessage;
}
inline bool Response::_internal_has_incoming_message() const {
  return result_case() == kIncomingMessage;
}
inline void Response::set_has_incoming_message() {
  _impl_._oneof_case_[0] = kIncomingMessage;
}
inline void Response::clear_incoming_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (result_case() == kIncomingMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.result_.incoming_message_;
    }
    clear_has_result();
  }
}
inline ::chat::IncomingMessageResponse* Response::release_incoming_message() {
  // @@protoc_insertion_point(field_release:chat.Response.incoming_message)
  if (result_case() == kIncomingMessage) {
    clear_has_result();
    auto* temp = _impl_.result_.incoming_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.incoming_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::IncomingMessageResponse& Response::_internal_incoming_message() const {
  return result_case() == kIncomingMessage ? *_impl_.result_.incoming_message_ : reinterpret_cast<::chat::IncomingMessageResponse&>(::chat::_IncomingMessageResponse_default_instance_);
}
inline const ::chat::IncomingMessageResponse& Response::incoming_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chat.Response.incoming_message)
  return _internal_incoming_message();
}
inline ::chat::IncomingMessageResponse* Response::unsafe_arena_release_incoming_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Response.incoming_message)
  if (result_case() == kIncomingMessage) {
    clear_has_result();
    auto* temp = _impl_.result_.incoming_message_;
    _impl_.result_.incoming_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_incoming_message(::chat::IncomingMessageResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_result();
  if (value) {
    set_has_incoming_message();
    _impl_.result_.incoming_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Response.incoming_message)
}
inline ::chat::IncomingMessageResponse* Response::_internal_mutable_incoming_message() {
  if (result_case() != kIncomingMessage) {
    clear_result();
    set_has_incoming_message();
    _impl_.result_.incoming_message_ =
        ::google::protobuf::Message::DefaultConstruct<::chat::IncomingMessageResponse>(GetArena());
  }
  return _impl_.result_.incoming_message_;
}
inline ::chat::IncomingMessageResponse* Response::mutable_incoming_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::chat::IncomingMessageResponse* _msg = _internal_mutable_incoming_message();
  // @@protoc_insertion_point(field_mutable:chat.Response.incoming_message)
  return _msg;
}

inline bool Response::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void Response::clear_has_result() {
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}
inline Response::ResultCase Response::result_case() const {
  return Response::ResultCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace chat


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::chat::UserStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::chat::UserStatus>() {
  return ::chat::UserStatus_descriptor();
}
template <>
struct is_proto_enum<::chat::MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::chat::MessageType>() {
  return ::chat::MessageType_descriptor();
}
template <>
struct is_proto_enum<::chat::UserListType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::chat::UserListType>() {
  return ::chat::UserListType_descriptor();
}
template <>
struct is_proto_enum<::chat::Operation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::chat::Operation>() {
  return ::chat::Operation_descriptor();
}
template <>
struct is_proto_enum<::chat::StatusCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::chat::StatusCode>() {
  return ::chat::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_chat_2eproto_2epb_2eh
