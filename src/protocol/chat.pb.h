// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace chat {
class IncomingMessageResponse;
class IncomingMessageResponseDefaultTypeInternal;
extern IncomingMessageResponseDefaultTypeInternal _IncomingMessageResponse_default_instance_;
class NewUserRequest;
class NewUserRequestDefaultTypeInternal;
extern NewUserRequestDefaultTypeInternal _NewUserRequest_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SendMessageRequest;
class SendMessageRequestDefaultTypeInternal;
extern SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
class UpdateStatusRequest;
class UpdateStatusRequestDefaultTypeInternal;
extern UpdateStatusRequestDefaultTypeInternal _UpdateStatusRequest_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserListRequest;
class UserListRequestDefaultTypeInternal;
extern UserListRequestDefaultTypeInternal _UserListRequest_default_instance_;
class UserListResponse;
class UserListResponseDefaultTypeInternal;
extern UserListResponseDefaultTypeInternal _UserListResponse_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::IncomingMessageResponse* Arena::CreateMaybeMessage<::chat::IncomingMessageResponse>(Arena*);
template<> ::chat::NewUserRequest* Arena::CreateMaybeMessage<::chat::NewUserRequest>(Arena*);
template<> ::chat::Request* Arena::CreateMaybeMessage<::chat::Request>(Arena*);
template<> ::chat::Response* Arena::CreateMaybeMessage<::chat::Response>(Arena*);
template<> ::chat::SendMessageRequest* Arena::CreateMaybeMessage<::chat::SendMessageRequest>(Arena*);
template<> ::chat::UpdateStatusRequest* Arena::CreateMaybeMessage<::chat::UpdateStatusRequest>(Arena*);
template<> ::chat::User* Arena::CreateMaybeMessage<::chat::User>(Arena*);
template<> ::chat::UserListRequest* Arena::CreateMaybeMessage<::chat::UserListRequest>(Arena*);
template<> ::chat::UserListResponse* Arena::CreateMaybeMessage<::chat::UserListResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

enum UserStatus : int {
  ONLINE = 0,
  BUSY = 1,
  OFFLINE = 2,
  UserStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserStatus_IsValid(int value);
constexpr UserStatus UserStatus_MIN = ONLINE;
constexpr UserStatus UserStatus_MAX = OFFLINE;
constexpr int UserStatus_ARRAYSIZE = UserStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserStatus_descriptor();
template<typename T>
inline const std::string& UserStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserStatus_descriptor(), enum_t_value);
}
inline bool UserStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserStatus>(
    UserStatus_descriptor(), name, value);
}
enum MessageType : int {
  BROADCAST = 0,
  DIRECT = 1,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = BROADCAST;
constexpr MessageType MessageType_MAX = DIRECT;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum UserListType : int {
  ALL = 0,
  SINGLE = 1,
  UserListType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserListType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserListType_IsValid(int value);
constexpr UserListType UserListType_MIN = ALL;
constexpr UserListType UserListType_MAX = SINGLE;
constexpr int UserListType_ARRAYSIZE = UserListType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserListType_descriptor();
template<typename T>
inline const std::string& UserListType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserListType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserListType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserListType_descriptor(), enum_t_value);
}
inline bool UserListType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserListType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserListType>(
    UserListType_descriptor(), name, value);
}
enum Operation : int {
  REGISTER_USER = 0,
  SEND_MESSAGE = 1,
  UPDATE_STATUS = 2,
  GET_USERS = 3,
  UNREGISTER_USER = 4,
  INCOMING_MESSAGE = 5,
  Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Operation_IsValid(int value);
constexpr Operation Operation_MIN = REGISTER_USER;
constexpr Operation Operation_MAX = INCOMING_MESSAGE;
constexpr int Operation_ARRAYSIZE = Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_descriptor();
template<typename T>
inline const std::string& Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operation_descriptor(), enum_t_value);
}
inline bool Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operation>(
    Operation_descriptor(), name, value);
}
enum StatusCode : int {
  UNKNOWN_STATUS = 0,
  OK = 200,
  BAD_REQUEST = 400,
  INTERNAL_SERVER_ERROR = 500,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatusCode_IsValid(int value);
constexpr StatusCode StatusCode_MIN = UNKNOWN_STATUS;
constexpr StatusCode StatusCode_MAX = INTERNAL_SERVER_ERROR;
constexpr int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor();
template<typename T>
inline const std::string& StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusCode_descriptor(), enum_t_value);
}
inline bool StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .chat.UserStatus status = 2;
  void clear_status();
  ::chat::UserStatus status() const;
  void set_status(::chat::UserStatus value);
  private:
  ::chat::UserStatus _internal_status() const;
  void _internal_set_status(::chat::UserStatus value);
  public:

  // @@protoc_insertion_point(class_scope:chat.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class NewUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.NewUserRequest) */ {
 public:
  inline NewUserRequest() : NewUserRequest(nullptr) {}
  virtual ~NewUserRequest();

  NewUserRequest(const NewUserRequest& from);
  NewUserRequest(NewUserRequest&& from) noexcept
    : NewUserRequest() {
    *this = ::std::move(from);
  }

  inline NewUserRequest& operator=(const NewUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewUserRequest& operator=(NewUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewUserRequest& default_instance();

  static inline const NewUserRequest* internal_default_instance() {
    return reinterpret_cast<const NewUserRequest*>(
               &_NewUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NewUserRequest& a, NewUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewUserRequest* New() const final {
    return CreateMaybeMessage<NewUserRequest>(nullptr);
  }

  NewUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewUserRequest& from);
  void MergeFrom(const NewUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.NewUserRequest";
  }
  protected:
  explicit NewUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:chat.NewUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class SendMessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.SendMessageRequest) */ {
 public:
  inline SendMessageRequest() : SendMessageRequest(nullptr) {}
  virtual ~SendMessageRequest();

  SendMessageRequest(const SendMessageRequest& from);
  SendMessageRequest(SendMessageRequest&& from) noexcept
    : SendMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageRequest& operator=(SendMessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageRequest& default_instance();

  static inline const SendMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendMessageRequest*>(
               &_SendMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendMessageRequest& a, SendMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageRequest* New() const final {
    return CreateMaybeMessage<SendMessageRequest>(nullptr);
  }

  SendMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.SendMessageRequest";
  }
  protected:
  explicit SendMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string recipient = 1;
  void clear_recipient();
  const std::string& recipient() const;
  void set_recipient(const std::string& value);
  void set_recipient(std::string&& value);
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  std::string* mutable_recipient();
  std::string* release_recipient();
  void set_allocated_recipient(std::string* recipient);
  private:
  const std::string& _internal_recipient() const;
  void _internal_set_recipient(const std::string& value);
  std::string* _internal_mutable_recipient();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:chat.SendMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class IncomingMessageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.IncomingMessageResponse) */ {
 public:
  inline IncomingMessageResponse() : IncomingMessageResponse(nullptr) {}
  virtual ~IncomingMessageResponse();

  IncomingMessageResponse(const IncomingMessageResponse& from);
  IncomingMessageResponse(IncomingMessageResponse&& from) noexcept
    : IncomingMessageResponse() {
    *this = ::std::move(from);
  }

  inline IncomingMessageResponse& operator=(const IncomingMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncomingMessageResponse& operator=(IncomingMessageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IncomingMessageResponse& default_instance();

  static inline const IncomingMessageResponse* internal_default_instance() {
    return reinterpret_cast<const IncomingMessageResponse*>(
               &_IncomingMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IncomingMessageResponse& a, IncomingMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IncomingMessageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncomingMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncomingMessageResponse* New() const final {
    return CreateMaybeMessage<IncomingMessageResponse>(nullptr);
  }

  IncomingMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncomingMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IncomingMessageResponse& from);
  void MergeFrom(const IncomingMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncomingMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.IncomingMessageResponse";
  }
  protected:
  explicit IncomingMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kContentFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string sender = 1;
  void clear_sender();
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .chat.MessageType type = 3;
  void clear_type();
  ::chat::MessageType type() const;
  void set_type(::chat::MessageType value);
  private:
  ::chat::MessageType _internal_type() const;
  void _internal_set_type(::chat::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:chat.IncomingMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class UserListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserListRequest) */ {
 public:
  inline UserListRequest() : UserListRequest(nullptr) {}
  virtual ~UserListRequest();

  UserListRequest(const UserListRequest& from);
  UserListRequest(UserListRequest&& from) noexcept
    : UserListRequest() {
    *this = ::std::move(from);
  }

  inline UserListRequest& operator=(const UserListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserListRequest& operator=(UserListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserListRequest& default_instance();

  static inline const UserListRequest* internal_default_instance() {
    return reinterpret_cast<const UserListRequest*>(
               &_UserListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserListRequest& a, UserListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserListRequest* New() const final {
    return CreateMaybeMessage<UserListRequest>(nullptr);
  }

  UserListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserListRequest& from);
  void MergeFrom(const UserListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserListRequest";
  }
  protected:
  explicit UserListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:chat.UserListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class UserListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserListResponse) */ {
 public:
  inline UserListResponse() : UserListResponse(nullptr) {}
  virtual ~UserListResponse();

  UserListResponse(const UserListResponse& from);
  UserListResponse(UserListResponse&& from) noexcept
    : UserListResponse() {
    *this = ::std::move(from);
  }

  inline UserListResponse& operator=(const UserListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserListResponse& operator=(UserListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserListResponse& default_instance();

  static inline const UserListResponse* internal_default_instance() {
    return reinterpret_cast<const UserListResponse*>(
               &_UserListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserListResponse& a, UserListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserListResponse* New() const final {
    return CreateMaybeMessage<UserListResponse>(nullptr);
  }

  UserListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserListResponse& from);
  void MergeFrom(const UserListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserListResponse";
  }
  protected:
  explicit UserListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .chat.User users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::chat::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::User >*
      mutable_users();
  private:
  const ::chat::User& _internal_users(int index) const;
  ::chat::User* _internal_add_users();
  public:
  const ::chat::User& users(int index) const;
  ::chat::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::User >&
      users() const;

  // .chat.UserListType type = 2;
  void clear_type();
  ::chat::UserListType type() const;
  void set_type(::chat::UserListType value);
  private:
  ::chat::UserListType _internal_type() const;
  void _internal_set_type(::chat::UserListType value);
  public:

  // @@protoc_insertion_point(class_scope:chat.UserListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::User > users_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class UpdateStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UpdateStatusRequest) */ {
 public:
  inline UpdateStatusRequest() : UpdateStatusRequest(nullptr) {}
  virtual ~UpdateStatusRequest();

  UpdateStatusRequest(const UpdateStatusRequest& from);
  UpdateStatusRequest(UpdateStatusRequest&& from) noexcept
    : UpdateStatusRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStatusRequest& operator=(const UpdateStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStatusRequest& operator=(UpdateStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateStatusRequest& default_instance();

  static inline const UpdateStatusRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStatusRequest*>(
               &_UpdateStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateStatusRequest& a, UpdateStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateStatusRequest* New() const final {
    return CreateMaybeMessage<UpdateStatusRequest>(nullptr);
  }

  UpdateStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateStatusRequest& from);
  void MergeFrom(const UpdateStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UpdateStatusRequest";
  }
  protected:
  explicit UpdateStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kNewStatusFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .chat.UserStatus new_status = 2;
  void clear_new_status();
  ::chat::UserStatus new_status() const;
  void set_new_status(::chat::UserStatus value);
  private:
  ::chat::UserStatus _internal_new_status() const;
  void _internal_set_new_status(::chat::UserStatus value);
  public:

  // @@protoc_insertion_point(class_scope:chat.UpdateStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int new_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum PayloadCase {
    kRegisterUser = 2,
    kSendMessage = 3,
    kUpdateStatus = 4,
    kGetUsers = 5,
    kUnregisterUser = 6,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
    kRegisterUserFieldNumber = 2,
    kSendMessageFieldNumber = 3,
    kUpdateStatusFieldNumber = 4,
    kGetUsersFieldNumber = 5,
    kUnregisterUserFieldNumber = 6,
  };
  // .chat.Operation operation = 1;
  void clear_operation();
  ::chat::Operation operation() const;
  void set_operation(::chat::Operation value);
  private:
  ::chat::Operation _internal_operation() const;
  void _internal_set_operation(::chat::Operation value);
  public:

  // .chat.NewUserRequest register_user = 2;
  bool has_register_user() const;
  private:
  bool _internal_has_register_user() const;
  public:
  void clear_register_user();
  const ::chat::NewUserRequest& register_user() const;
  ::chat::NewUserRequest* release_register_user();
  ::chat::NewUserRequest* mutable_register_user();
  void set_allocated_register_user(::chat::NewUserRequest* register_user);
  private:
  const ::chat::NewUserRequest& _internal_register_user() const;
  ::chat::NewUserRequest* _internal_mutable_register_user();
  public:
  void unsafe_arena_set_allocated_register_user(
      ::chat::NewUserRequest* register_user);
  ::chat::NewUserRequest* unsafe_arena_release_register_user();

  // .chat.SendMessageRequest send_message = 3;
  bool has_send_message() const;
  private:
  bool _internal_has_send_message() const;
  public:
  void clear_send_message();
  const ::chat::SendMessageRequest& send_message() const;
  ::chat::SendMessageRequest* release_send_message();
  ::chat::SendMessageRequest* mutable_send_message();
  void set_allocated_send_message(::chat::SendMessageRequest* send_message);
  private:
  const ::chat::SendMessageRequest& _internal_send_message() const;
  ::chat::SendMessageRequest* _internal_mutable_send_message();
  public:
  void unsafe_arena_set_allocated_send_message(
      ::chat::SendMessageRequest* send_message);
  ::chat::SendMessageRequest* unsafe_arena_release_send_message();

  // .chat.UpdateStatusRequest update_status = 4;
  bool has_update_status() const;
  private:
  bool _internal_has_update_status() const;
  public:
  void clear_update_status();
  const ::chat::UpdateStatusRequest& update_status() const;
  ::chat::UpdateStatusRequest* release_update_status();
  ::chat::UpdateStatusRequest* mutable_update_status();
  void set_allocated_update_status(::chat::UpdateStatusRequest* update_status);
  private:
  const ::chat::UpdateStatusRequest& _internal_update_status() const;
  ::chat::UpdateStatusRequest* _internal_mutable_update_status();
  public:
  void unsafe_arena_set_allocated_update_status(
      ::chat::UpdateStatusRequest* update_status);
  ::chat::UpdateStatusRequest* unsafe_arena_release_update_status();

  // .chat.UserListRequest get_users = 5;
  bool has_get_users() const;
  private:
  bool _internal_has_get_users() const;
  public:
  void clear_get_users();
  const ::chat::UserListRequest& get_users() const;
  ::chat::UserListRequest* release_get_users();
  ::chat::UserListRequest* mutable_get_users();
  void set_allocated_get_users(::chat::UserListRequest* get_users);
  private:
  const ::chat::UserListRequest& _internal_get_users() const;
  ::chat::UserListRequest* _internal_mutable_get_users();
  public:
  void unsafe_arena_set_allocated_get_users(
      ::chat::UserListRequest* get_users);
  ::chat::UserListRequest* unsafe_arena_release_get_users();

  // .chat.User unregister_user = 6;
  bool has_unregister_user() const;
  private:
  bool _internal_has_unregister_user() const;
  public:
  void clear_unregister_user();
  const ::chat::User& unregister_user() const;
  ::chat::User* release_unregister_user();
  ::chat::User* mutable_unregister_user();
  void set_allocated_unregister_user(::chat::User* unregister_user);
  private:
  const ::chat::User& _internal_unregister_user() const;
  ::chat::User* _internal_mutable_unregister_user();
  public:
  void unsafe_arena_set_allocated_unregister_user(
      ::chat::User* unregister_user);
  ::chat::User* unsafe_arena_release_unregister_user();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:chat.Request)
 private:
  class _Internal;
  void set_has_register_user();
  void set_has_send_message();
  void set_has_update_status();
  void set_has_get_users();
  void set_has_unregister_user();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int operation_;
  union PayloadUnion {
    PayloadUnion() {}
    ::chat::NewUserRequest* register_user_;
    ::chat::SendMessageRequest* send_message_;
    ::chat::UpdateStatusRequest* update_status_;
    ::chat::UserListRequest* get_users_;
    ::chat::User* unregister_user_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  enum ResultCase {
    kUserList = 4,
    kIncomingMessage = 5,
    RESULT_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kOperationFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kUserListFieldNumber = 4,
    kIncomingMessageFieldNumber = 5,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .chat.Operation operation = 1;
  void clear_operation();
  ::chat::Operation operation() const;
  void set_operation(::chat::Operation value);
  private:
  ::chat::Operation _internal_operation() const;
  void _internal_set_operation(::chat::Operation value);
  public:

  // .chat.StatusCode status_code = 2;
  void clear_status_code();
  ::chat::StatusCode status_code() const;
  void set_status_code(::chat::StatusCode value);
  private:
  ::chat::StatusCode _internal_status_code() const;
  void _internal_set_status_code(::chat::StatusCode value);
  public:

  // .chat.UserListResponse user_list = 4;
  bool has_user_list() const;
  private:
  bool _internal_has_user_list() const;
  public:
  void clear_user_list();
  const ::chat::UserListResponse& user_list() const;
  ::chat::UserListResponse* release_user_list();
  ::chat::UserListResponse* mutable_user_list();
  void set_allocated_user_list(::chat::UserListResponse* user_list);
  private:
  const ::chat::UserListResponse& _internal_user_list() const;
  ::chat::UserListResponse* _internal_mutable_user_list();
  public:
  void unsafe_arena_set_allocated_user_list(
      ::chat::UserListResponse* user_list);
  ::chat::UserListResponse* unsafe_arena_release_user_list();

  // .chat.IncomingMessageResponse incoming_message = 5;
  bool has_incoming_message() const;
  private:
  bool _internal_has_incoming_message() const;
  public:
  void clear_incoming_message();
  const ::chat::IncomingMessageResponse& incoming_message() const;
  ::chat::IncomingMessageResponse* release_incoming_message();
  ::chat::IncomingMessageResponse* mutable_incoming_message();
  void set_allocated_incoming_message(::chat::IncomingMessageResponse* incoming_message);
  private:
  const ::chat::IncomingMessageResponse& _internal_incoming_message() const;
  ::chat::IncomingMessageResponse* _internal_mutable_incoming_message();
  public:
  void unsafe_arena_set_allocated_incoming_message(
      ::chat::IncomingMessageResponse* incoming_message);
  ::chat::IncomingMessageResponse* unsafe_arena_release_incoming_message();

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:chat.Response)
 private:
  class _Internal;
  void set_has_user_list();
  void set_has_incoming_message();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int operation_;
  int status_code_;
  union ResultUnion {
    ResultUnion() {}
    ::chat::UserListResponse* user_list_;
    ::chat::IncomingMessageResponse* incoming_message_;
  } result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string username = 1;
inline void User::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& User::username() const {
  // @@protoc_insertion_point(field_get:chat.User.username)
  return _internal_username();
}
inline void User::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.User.username)
}
inline std::string* User::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.User.username)
  return _internal_mutable_username();
}
inline const std::string& User::_internal_username() const {
  return username_.Get();
}
inline void User::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.User.username)
}
inline void User::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.User.username)
}
inline void User::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.User.username)
}
inline std::string* User::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:chat.User.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.User.username)
}

// .chat.UserStatus status = 2;
inline void User::clear_status() {
  status_ = 0;
}
inline ::chat::UserStatus User::_internal_status() const {
  return static_cast< ::chat::UserStatus >(status_);
}
inline ::chat::UserStatus User::status() const {
  // @@protoc_insertion_point(field_get:chat.User.status)
  return _internal_status();
}
inline void User::_internal_set_status(::chat::UserStatus value) {
  
  status_ = value;
}
inline void User::set_status(::chat::UserStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chat.User.status)
}

// -------------------------------------------------------------------

// NewUserRequest

// string username = 1;
inline void NewUserRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& NewUserRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.NewUserRequest.username)
  return _internal_username();
}
inline void NewUserRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.NewUserRequest.username)
}
inline std::string* NewUserRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.NewUserRequest.username)
  return _internal_mutable_username();
}
inline const std::string& NewUserRequest::_internal_username() const {
  return username_.Get();
}
inline void NewUserRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewUserRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.NewUserRequest.username)
}
inline void NewUserRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.NewUserRequest.username)
}
inline void NewUserRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.NewUserRequest.username)
}
inline std::string* NewUserRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewUserRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.NewUserRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewUserRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.NewUserRequest.username)
}

// -------------------------------------------------------------------

// SendMessageRequest

// string recipient = 1;
inline void SendMessageRequest::clear_recipient() {
  recipient_.ClearToEmpty();
}
inline const std::string& SendMessageRequest::recipient() const {
  // @@protoc_insertion_point(field_get:chat.SendMessageRequest.recipient)
  return _internal_recipient();
}
inline void SendMessageRequest::set_recipient(const std::string& value) {
  _internal_set_recipient(value);
  // @@protoc_insertion_point(field_set:chat.SendMessageRequest.recipient)
}
inline std::string* SendMessageRequest::mutable_recipient() {
  // @@protoc_insertion_point(field_mutable:chat.SendMessageRequest.recipient)
  return _internal_mutable_recipient();
}
inline const std::string& SendMessageRequest::_internal_recipient() const {
  return recipient_.Get();
}
inline void SendMessageRequest::_internal_set_recipient(const std::string& value) {
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendMessageRequest::set_recipient(std::string&& value) {
  
  recipient_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.SendMessageRequest.recipient)
}
inline void SendMessageRequest::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.SendMessageRequest.recipient)
}
inline void SendMessageRequest::set_recipient(const char* value,
    size_t size) {
  
  recipient_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.SendMessageRequest.recipient)
}
inline std::string* SendMessageRequest::_internal_mutable_recipient() {
  
  return recipient_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendMessageRequest::release_recipient() {
  // @@protoc_insertion_point(field_release:chat.SendMessageRequest.recipient)
  return recipient_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendMessageRequest::set_allocated_recipient(std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.SendMessageRequest.recipient)
}

// string content = 2;
inline void SendMessageRequest::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& SendMessageRequest::content() const {
  // @@protoc_insertion_point(field_get:chat.SendMessageRequest.content)
  return _internal_content();
}
inline void SendMessageRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:chat.SendMessageRequest.content)
}
inline std::string* SendMessageRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:chat.SendMessageRequest.content)
  return _internal_mutable_content();
}
inline const std::string& SendMessageRequest::_internal_content() const {
  return content_.Get();
}
inline void SendMessageRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendMessageRequest::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.SendMessageRequest.content)
}
inline void SendMessageRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.SendMessageRequest.content)
}
inline void SendMessageRequest::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.SendMessageRequest.content)
}
inline std::string* SendMessageRequest::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendMessageRequest::release_content() {
  // @@protoc_insertion_point(field_release:chat.SendMessageRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendMessageRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.SendMessageRequest.content)
}

// -------------------------------------------------------------------

// IncomingMessageResponse

// string sender = 1;
inline void IncomingMessageResponse::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& IncomingMessageResponse::sender() const {
  // @@protoc_insertion_point(field_get:chat.IncomingMessageResponse.sender)
  return _internal_sender();
}
inline void IncomingMessageResponse::set_sender(const std::string& value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:chat.IncomingMessageResponse.sender)
}
inline std::string* IncomingMessageResponse::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:chat.IncomingMessageResponse.sender)
  return _internal_mutable_sender();
}
inline const std::string& IncomingMessageResponse::_internal_sender() const {
  return sender_.Get();
}
inline void IncomingMessageResponse::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IncomingMessageResponse::set_sender(std::string&& value) {
  
  sender_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.IncomingMessageResponse.sender)
}
inline void IncomingMessageResponse::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.IncomingMessageResponse.sender)
}
inline void IncomingMessageResponse::set_sender(const char* value,
    size_t size) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.IncomingMessageResponse.sender)
}
inline std::string* IncomingMessageResponse::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IncomingMessageResponse::release_sender() {
  // @@protoc_insertion_point(field_release:chat.IncomingMessageResponse.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IncomingMessageResponse::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.IncomingMessageResponse.sender)
}

// string content = 2;
inline void IncomingMessageResponse::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& IncomingMessageResponse::content() const {
  // @@protoc_insertion_point(field_get:chat.IncomingMessageResponse.content)
  return _internal_content();
}
inline void IncomingMessageResponse::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:chat.IncomingMessageResponse.content)
}
inline std::string* IncomingMessageResponse::mutable_content() {
  // @@protoc_insertion_point(field_mutable:chat.IncomingMessageResponse.content)
  return _internal_mutable_content();
}
inline const std::string& IncomingMessageResponse::_internal_content() const {
  return content_.Get();
}
inline void IncomingMessageResponse::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IncomingMessageResponse::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.IncomingMessageResponse.content)
}
inline void IncomingMessageResponse::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.IncomingMessageResponse.content)
}
inline void IncomingMessageResponse::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.IncomingMessageResponse.content)
}
inline std::string* IncomingMessageResponse::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IncomingMessageResponse::release_content() {
  // @@protoc_insertion_point(field_release:chat.IncomingMessageResponse.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IncomingMessageResponse::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.IncomingMessageResponse.content)
}

// .chat.MessageType type = 3;
inline void IncomingMessageResponse::clear_type() {
  type_ = 0;
}
inline ::chat::MessageType IncomingMessageResponse::_internal_type() const {
  return static_cast< ::chat::MessageType >(type_);
}
inline ::chat::MessageType IncomingMessageResponse::type() const {
  // @@protoc_insertion_point(field_get:chat.IncomingMessageResponse.type)
  return _internal_type();
}
inline void IncomingMessageResponse::_internal_set_type(::chat::MessageType value) {
  
  type_ = value;
}
inline void IncomingMessageResponse::set_type(::chat::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chat.IncomingMessageResponse.type)
}

// -------------------------------------------------------------------

// UserListRequest

// string username = 1;
inline void UserListRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& UserListRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.UserListRequest.username)
  return _internal_username();
}
inline void UserListRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.UserListRequest.username)
}
inline std::string* UserListRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.UserListRequest.username)
  return _internal_mutable_username();
}
inline const std::string& UserListRequest::_internal_username() const {
  return username_.Get();
}
inline void UserListRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserListRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.UserListRequest.username)
}
inline void UserListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.UserListRequest.username)
}
inline void UserListRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.UserListRequest.username)
}
inline std::string* UserListRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserListRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.UserListRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserListRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.UserListRequest.username)
}

// -------------------------------------------------------------------

// UserListResponse

// repeated .chat.User users = 1;
inline int UserListResponse::_internal_users_size() const {
  return users_.size();
}
inline int UserListResponse::users_size() const {
  return _internal_users_size();
}
inline void UserListResponse::clear_users() {
  users_.Clear();
}
inline ::chat::User* UserListResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:chat.UserListResponse.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::User >*
UserListResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:chat.UserListResponse.users)
  return &users_;
}
inline const ::chat::User& UserListResponse::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::chat::User& UserListResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:chat.UserListResponse.users)
  return _internal_users(index);
}
inline ::chat::User* UserListResponse::_internal_add_users() {
  return users_.Add();
}
inline ::chat::User* UserListResponse::add_users() {
  // @@protoc_insertion_point(field_add:chat.UserListResponse.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::User >&
UserListResponse::users() const {
  // @@protoc_insertion_point(field_list:chat.UserListResponse.users)
  return users_;
}

// .chat.UserListType type = 2;
inline void UserListResponse::clear_type() {
  type_ = 0;
}
inline ::chat::UserListType UserListResponse::_internal_type() const {
  return static_cast< ::chat::UserListType >(type_);
}
inline ::chat::UserListType UserListResponse::type() const {
  // @@protoc_insertion_point(field_get:chat.UserListResponse.type)
  return _internal_type();
}
inline void UserListResponse::_internal_set_type(::chat::UserListType value) {
  
  type_ = value;
}
inline void UserListResponse::set_type(::chat::UserListType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chat.UserListResponse.type)
}

// -------------------------------------------------------------------

// UpdateStatusRequest

// string username = 1;
inline void UpdateStatusRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& UpdateStatusRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.UpdateStatusRequest.username)
  return _internal_username();
}
inline void UpdateStatusRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.UpdateStatusRequest.username)
}
inline std::string* UpdateStatusRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.UpdateStatusRequest.username)
  return _internal_mutable_username();
}
inline const std::string& UpdateStatusRequest::_internal_username() const {
  return username_.Get();
}
inline void UpdateStatusRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateStatusRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.UpdateStatusRequest.username)
}
inline void UpdateStatusRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.UpdateStatusRequest.username)
}
inline void UpdateStatusRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.UpdateStatusRequest.username)
}
inline std::string* UpdateStatusRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateStatusRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.UpdateStatusRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateStatusRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.UpdateStatusRequest.username)
}

// .chat.UserStatus new_status = 2;
inline void UpdateStatusRequest::clear_new_status() {
  new_status_ = 0;
}
inline ::chat::UserStatus UpdateStatusRequest::_internal_new_status() const {
  return static_cast< ::chat::UserStatus >(new_status_);
}
inline ::chat::UserStatus UpdateStatusRequest::new_status() const {
  // @@protoc_insertion_point(field_get:chat.UpdateStatusRequest.new_status)
  return _internal_new_status();
}
inline void UpdateStatusRequest::_internal_set_new_status(::chat::UserStatus value) {
  
  new_status_ = value;
}
inline void UpdateStatusRequest::set_new_status(::chat::UserStatus value) {
  _internal_set_new_status(value);
  // @@protoc_insertion_point(field_set:chat.UpdateStatusRequest.new_status)
}

// -------------------------------------------------------------------

// Request

// .chat.Operation operation = 1;
inline void Request::clear_operation() {
  operation_ = 0;
}
inline ::chat::Operation Request::_internal_operation() const {
  return static_cast< ::chat::Operation >(operation_);
}
inline ::chat::Operation Request::operation() const {
  // @@protoc_insertion_point(field_get:chat.Request.operation)
  return _internal_operation();
}
inline void Request::_internal_set_operation(::chat::Operation value) {
  
  operation_ = value;
}
inline void Request::set_operation(::chat::Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:chat.Request.operation)
}

// .chat.NewUserRequest register_user = 2;
inline bool Request::_internal_has_register_user() const {
  return payload_case() == kRegisterUser;
}
inline bool Request::has_register_user() const {
  return _internal_has_register_user();
}
inline void Request::set_has_register_user() {
  _oneof_case_[0] = kRegisterUser;
}
inline void Request::clear_register_user() {
  if (_internal_has_register_user()) {
    if (GetArena() == nullptr) {
      delete payload_.register_user_;
    }
    clear_has_payload();
  }
}
inline ::chat::NewUserRequest* Request::release_register_user() {
  // @@protoc_insertion_point(field_release:chat.Request.register_user)
  if (_internal_has_register_user()) {
    clear_has_payload();
      ::chat::NewUserRequest* temp = payload_.register_user_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.register_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::NewUserRequest& Request::_internal_register_user() const {
  return _internal_has_register_user()
      ? *payload_.register_user_
      : reinterpret_cast< ::chat::NewUserRequest&>(::chat::_NewUserRequest_default_instance_);
}
inline const ::chat::NewUserRequest& Request::register_user() const {
  // @@protoc_insertion_point(field_get:chat.Request.register_user)
  return _internal_register_user();
}
inline ::chat::NewUserRequest* Request::unsafe_arena_release_register_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Request.register_user)
  if (_internal_has_register_user()) {
    clear_has_payload();
    ::chat::NewUserRequest* temp = payload_.register_user_;
    payload_.register_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_register_user(::chat::NewUserRequest* register_user) {
  clear_payload();
  if (register_user) {
    set_has_register_user();
    payload_.register_user_ = register_user;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Request.register_user)
}
inline ::chat::NewUserRequest* Request::_internal_mutable_register_user() {
  if (!_internal_has_register_user()) {
    clear_payload();
    set_has_register_user();
    payload_.register_user_ = CreateMaybeMessage< ::chat::NewUserRequest >(GetArena());
  }
  return payload_.register_user_;
}
inline ::chat::NewUserRequest* Request::mutable_register_user() {
  // @@protoc_insertion_point(field_mutable:chat.Request.register_user)
  return _internal_mutable_register_user();
}

// .chat.SendMessageRequest send_message = 3;
inline bool Request::_internal_has_send_message() const {
  return payload_case() == kSendMessage;
}
inline bool Request::has_send_message() const {
  return _internal_has_send_message();
}
inline void Request::set_has_send_message() {
  _oneof_case_[0] = kSendMessage;
}
inline void Request::clear_send_message() {
  if (_internal_has_send_message()) {
    if (GetArena() == nullptr) {
      delete payload_.send_message_;
    }
    clear_has_payload();
  }
}
inline ::chat::SendMessageRequest* Request::release_send_message() {
  // @@protoc_insertion_point(field_release:chat.Request.send_message)
  if (_internal_has_send_message()) {
    clear_has_payload();
      ::chat::SendMessageRequest* temp = payload_.send_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::SendMessageRequest& Request::_internal_send_message() const {
  return _internal_has_send_message()
      ? *payload_.send_message_
      : reinterpret_cast< ::chat::SendMessageRequest&>(::chat::_SendMessageRequest_default_instance_);
}
inline const ::chat::SendMessageRequest& Request::send_message() const {
  // @@protoc_insertion_point(field_get:chat.Request.send_message)
  return _internal_send_message();
}
inline ::chat::SendMessageRequest* Request::unsafe_arena_release_send_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Request.send_message)
  if (_internal_has_send_message()) {
    clear_has_payload();
    ::chat::SendMessageRequest* temp = payload_.send_message_;
    payload_.send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_send_message(::chat::SendMessageRequest* send_message) {
  clear_payload();
  if (send_message) {
    set_has_send_message();
    payload_.send_message_ = send_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Request.send_message)
}
inline ::chat::SendMessageRequest* Request::_internal_mutable_send_message() {
  if (!_internal_has_send_message()) {
    clear_payload();
    set_has_send_message();
    payload_.send_message_ = CreateMaybeMessage< ::chat::SendMessageRequest >(GetArena());
  }
  return payload_.send_message_;
}
inline ::chat::SendMessageRequest* Request::mutable_send_message() {
  // @@protoc_insertion_point(field_mutable:chat.Request.send_message)
  return _internal_mutable_send_message();
}

// .chat.UpdateStatusRequest update_status = 4;
inline bool Request::_internal_has_update_status() const {
  return payload_case() == kUpdateStatus;
}
inline bool Request::has_update_status() const {
  return _internal_has_update_status();
}
inline void Request::set_has_update_status() {
  _oneof_case_[0] = kUpdateStatus;
}
inline void Request::clear_update_status() {
  if (_internal_has_update_status()) {
    if (GetArena() == nullptr) {
      delete payload_.update_status_;
    }
    clear_has_payload();
  }
}
inline ::chat::UpdateStatusRequest* Request::release_update_status() {
  // @@protoc_insertion_point(field_release:chat.Request.update_status)
  if (_internal_has_update_status()) {
    clear_has_payload();
      ::chat::UpdateStatusRequest* temp = payload_.update_status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.update_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::UpdateStatusRequest& Request::_internal_update_status() const {
  return _internal_has_update_status()
      ? *payload_.update_status_
      : reinterpret_cast< ::chat::UpdateStatusRequest&>(::chat::_UpdateStatusRequest_default_instance_);
}
inline const ::chat::UpdateStatusRequest& Request::update_status() const {
  // @@protoc_insertion_point(field_get:chat.Request.update_status)
  return _internal_update_status();
}
inline ::chat::UpdateStatusRequest* Request::unsafe_arena_release_update_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Request.update_status)
  if (_internal_has_update_status()) {
    clear_has_payload();
    ::chat::UpdateStatusRequest* temp = payload_.update_status_;
    payload_.update_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_update_status(::chat::UpdateStatusRequest* update_status) {
  clear_payload();
  if (update_status) {
    set_has_update_status();
    payload_.update_status_ = update_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Request.update_status)
}
inline ::chat::UpdateStatusRequest* Request::_internal_mutable_update_status() {
  if (!_internal_has_update_status()) {
    clear_payload();
    set_has_update_status();
    payload_.update_status_ = CreateMaybeMessage< ::chat::UpdateStatusRequest >(GetArena());
  }
  return payload_.update_status_;
}
inline ::chat::UpdateStatusRequest* Request::mutable_update_status() {
  // @@protoc_insertion_point(field_mutable:chat.Request.update_status)
  return _internal_mutable_update_status();
}

// .chat.UserListRequest get_users = 5;
inline bool Request::_internal_has_get_users() const {
  return payload_case() == kGetUsers;
}
inline bool Request::has_get_users() const {
  return _internal_has_get_users();
}
inline void Request::set_has_get_users() {
  _oneof_case_[0] = kGetUsers;
}
inline void Request::clear_get_users() {
  if (_internal_has_get_users()) {
    if (GetArena() == nullptr) {
      delete payload_.get_users_;
    }
    clear_has_payload();
  }
}
inline ::chat::UserListRequest* Request::release_get_users() {
  // @@protoc_insertion_point(field_release:chat.Request.get_users)
  if (_internal_has_get_users()) {
    clear_has_payload();
      ::chat::UserListRequest* temp = payload_.get_users_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.get_users_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::UserListRequest& Request::_internal_get_users() const {
  return _internal_has_get_users()
      ? *payload_.get_users_
      : reinterpret_cast< ::chat::UserListRequest&>(::chat::_UserListRequest_default_instance_);
}
inline const ::chat::UserListRequest& Request::get_users() const {
  // @@protoc_insertion_point(field_get:chat.Request.get_users)
  return _internal_get_users();
}
inline ::chat::UserListRequest* Request::unsafe_arena_release_get_users() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Request.get_users)
  if (_internal_has_get_users()) {
    clear_has_payload();
    ::chat::UserListRequest* temp = payload_.get_users_;
    payload_.get_users_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_users(::chat::UserListRequest* get_users) {
  clear_payload();
  if (get_users) {
    set_has_get_users();
    payload_.get_users_ = get_users;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Request.get_users)
}
inline ::chat::UserListRequest* Request::_internal_mutable_get_users() {
  if (!_internal_has_get_users()) {
    clear_payload();
    set_has_get_users();
    payload_.get_users_ = CreateMaybeMessage< ::chat::UserListRequest >(GetArena());
  }
  return payload_.get_users_;
}
inline ::chat::UserListRequest* Request::mutable_get_users() {
  // @@protoc_insertion_point(field_mutable:chat.Request.get_users)
  return _internal_mutable_get_users();
}

// .chat.User unregister_user = 6;
inline bool Request::_internal_has_unregister_user() const {
  return payload_case() == kUnregisterUser;
}
inline bool Request::has_unregister_user() const {
  return _internal_has_unregister_user();
}
inline void Request::set_has_unregister_user() {
  _oneof_case_[0] = kUnregisterUser;
}
inline void Request::clear_unregister_user() {
  if (_internal_has_unregister_user()) {
    if (GetArena() == nullptr) {
      delete payload_.unregister_user_;
    }
    clear_has_payload();
  }
}
inline ::chat::User* Request::release_unregister_user() {
  // @@protoc_insertion_point(field_release:chat.Request.unregister_user)
  if (_internal_has_unregister_user()) {
    clear_has_payload();
      ::chat::User* temp = payload_.unregister_user_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.unregister_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::User& Request::_internal_unregister_user() const {
  return _internal_has_unregister_user()
      ? *payload_.unregister_user_
      : reinterpret_cast< ::chat::User&>(::chat::_User_default_instance_);
}
inline const ::chat::User& Request::unregister_user() const {
  // @@protoc_insertion_point(field_get:chat.Request.unregister_user)
  return _internal_unregister_user();
}
inline ::chat::User* Request::unsafe_arena_release_unregister_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Request.unregister_user)
  if (_internal_has_unregister_user()) {
    clear_has_payload();
    ::chat::User* temp = payload_.unregister_user_;
    payload_.unregister_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_unregister_user(::chat::User* unregister_user) {
  clear_payload();
  if (unregister_user) {
    set_has_unregister_user();
    payload_.unregister_user_ = unregister_user;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Request.unregister_user)
}
inline ::chat::User* Request::_internal_mutable_unregister_user() {
  if (!_internal_has_unregister_user()) {
    clear_payload();
    set_has_unregister_user();
    payload_.unregister_user_ = CreateMaybeMessage< ::chat::User >(GetArena());
  }
  return payload_.unregister_user_;
}
inline ::chat::User* Request::mutable_unregister_user() {
  // @@protoc_insertion_point(field_mutable:chat.Request.unregister_user)
  return _internal_mutable_unregister_user();
}

inline bool Request::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Request::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Request::PayloadCase Request::payload_case() const {
  return Request::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .chat.Operation operation = 1;
inline void Response::clear_operation() {
  operation_ = 0;
}
inline ::chat::Operation Response::_internal_operation() const {
  return static_cast< ::chat::Operation >(operation_);
}
inline ::chat::Operation Response::operation() const {
  // @@protoc_insertion_point(field_get:chat.Response.operation)
  return _internal_operation();
}
inline void Response::_internal_set_operation(::chat::Operation value) {
  
  operation_ = value;
}
inline void Response::set_operation(::chat::Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:chat.Response.operation)
}

// .chat.StatusCode status_code = 2;
inline void Response::clear_status_code() {
  status_code_ = 0;
}
inline ::chat::StatusCode Response::_internal_status_code() const {
  return static_cast< ::chat::StatusCode >(status_code_);
}
inline ::chat::StatusCode Response::status_code() const {
  // @@protoc_insertion_point(field_get:chat.Response.status_code)
  return _internal_status_code();
}
inline void Response::_internal_set_status_code(::chat::StatusCode value) {
  
  status_code_ = value;
}
inline void Response::set_status_code(::chat::StatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:chat.Response.status_code)
}

// string message = 3;
inline void Response::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:chat.Response.message)
  return _internal_message();
}
inline void Response::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.Response.message)
}
inline std::string* Response::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.Response.message)
  return _internal_mutable_message();
}
inline const std::string& Response::_internal_message() const {
  return message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.Response.message)
}
inline void Response::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.Response.message)
}
inline void Response::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.Response.message)
}
inline std::string* Response::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:chat.Response.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.Response.message)
}

// .chat.UserListResponse user_list = 4;
inline bool Response::_internal_has_user_list() const {
  return result_case() == kUserList;
}
inline bool Response::has_user_list() const {
  return _internal_has_user_list();
}
inline void Response::set_has_user_list() {
  _oneof_case_[0] = kUserList;
}
inline void Response::clear_user_list() {
  if (_internal_has_user_list()) {
    if (GetArena() == nullptr) {
      delete result_.user_list_;
    }
    clear_has_result();
  }
}
inline ::chat::UserListResponse* Response::release_user_list() {
  // @@protoc_insertion_point(field_release:chat.Response.user_list)
  if (_internal_has_user_list()) {
    clear_has_result();
      ::chat::UserListResponse* temp = result_.user_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.user_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::UserListResponse& Response::_internal_user_list() const {
  return _internal_has_user_list()
      ? *result_.user_list_
      : reinterpret_cast< ::chat::UserListResponse&>(::chat::_UserListResponse_default_instance_);
}
inline const ::chat::UserListResponse& Response::user_list() const {
  // @@protoc_insertion_point(field_get:chat.Response.user_list)
  return _internal_user_list();
}
inline ::chat::UserListResponse* Response::unsafe_arena_release_user_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Response.user_list)
  if (_internal_has_user_list()) {
    clear_has_result();
    ::chat::UserListResponse* temp = result_.user_list_;
    result_.user_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_user_list(::chat::UserListResponse* user_list) {
  clear_result();
  if (user_list) {
    set_has_user_list();
    result_.user_list_ = user_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Response.user_list)
}
inline ::chat::UserListResponse* Response::_internal_mutable_user_list() {
  if (!_internal_has_user_list()) {
    clear_result();
    set_has_user_list();
    result_.user_list_ = CreateMaybeMessage< ::chat::UserListResponse >(GetArena());
  }
  return result_.user_list_;
}
inline ::chat::UserListResponse* Response::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable:chat.Response.user_list)
  return _internal_mutable_user_list();
}

// .chat.IncomingMessageResponse incoming_message = 5;
inline bool Response::_internal_has_incoming_message() const {
  return result_case() == kIncomingMessage;
}
inline bool Response::has_incoming_message() const {
  return _internal_has_incoming_message();
}
inline void Response::set_has_incoming_message() {
  _oneof_case_[0] = kIncomingMessage;
}
inline void Response::clear_incoming_message() {
  if (_internal_has_incoming_message()) {
    if (GetArena() == nullptr) {
      delete result_.incoming_message_;
    }
    clear_has_result();
  }
}
inline ::chat::IncomingMessageResponse* Response::release_incoming_message() {
  // @@protoc_insertion_point(field_release:chat.Response.incoming_message)
  if (_internal_has_incoming_message()) {
    clear_has_result();
      ::chat::IncomingMessageResponse* temp = result_.incoming_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.incoming_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chat::IncomingMessageResponse& Response::_internal_incoming_message() const {
  return _internal_has_incoming_message()
      ? *result_.incoming_message_
      : reinterpret_cast< ::chat::IncomingMessageResponse&>(::chat::_IncomingMessageResponse_default_instance_);
}
inline const ::chat::IncomingMessageResponse& Response::incoming_message() const {
  // @@protoc_insertion_point(field_get:chat.Response.incoming_message)
  return _internal_incoming_message();
}
inline ::chat::IncomingMessageResponse* Response::unsafe_arena_release_incoming_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chat.Response.incoming_message)
  if (_internal_has_incoming_message()) {
    clear_has_result();
    ::chat::IncomingMessageResponse* temp = result_.incoming_message_;
    result_.incoming_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_incoming_message(::chat::IncomingMessageResponse* incoming_message) {
  clear_result();
  if (incoming_message) {
    set_has_incoming_message();
    result_.incoming_message_ = incoming_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.Response.incoming_message)
}
inline ::chat::IncomingMessageResponse* Response::_internal_mutable_incoming_message() {
  if (!_internal_has_incoming_message()) {
    clear_result();
    set_has_incoming_message();
    result_.incoming_message_ = CreateMaybeMessage< ::chat::IncomingMessageResponse >(GetArena());
  }
  return result_.incoming_message_;
}
inline ::chat::IncomingMessageResponse* Response::mutable_incoming_message() {
  // @@protoc_insertion_point(field_mutable:chat.Response.incoming_message)
  return _internal_mutable_incoming_message();
}

inline bool Response::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void Response::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline Response::ResultCase Response::result_case() const {
  return Response::ResultCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chat::UserStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::UserStatus>() {
  return ::chat::UserStatus_descriptor();
}
template <> struct is_proto_enum< ::chat::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::MessageType>() {
  return ::chat::MessageType_descriptor();
}
template <> struct is_proto_enum< ::chat::UserListType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::UserListType>() {
  return ::chat::UserListType_descriptor();
}
template <> struct is_proto_enum< ::chat::Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::Operation>() {
  return ::chat::Operation_descriptor();
}
template <> struct is_proto_enum< ::chat::StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::StatusCode>() {
  return ::chat::StatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
